{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let UpdateStudentComponent = class UpdateStudentComponent {\n  constructor(fb, studentService, route, router) {\n    this.fb = fb;\n    this.studentService = studentService;\n    this.route = route;\n    this.router = router;\n    // Initialisation du formulaire réactif avec tous les champs\n    this.updateStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required] // Ajout de ce champ\n    });\n  }\n\n  ngOnInit() {\n    // Récupérer l'ID de l'étudiant à partir de l'URL\n    this.studentId = this.route.snapshot.params['id'];\n    // Charger les données de l'étudiant à mettre à jour\n    this.studentService.getStudentById(this.studentId).subscribe(data => {\n      // Patch des valeurs de l'étudiant récupéré dans le formulaire\n      this.updateStudentForm.patchValue({\n        username: data.username,\n        password: data.password,\n        role: data.role,\n        overlappingGroups: data.overlappingGroups // Inclure overlappingGroups\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.updateStudentForm.valid) {\n      // Appel du service pour mettre à jour l'étudiant\n      this.studentService.updateStudent(this.studentId, this.updateStudentForm.value).subscribe(() => {\n        // Redirection après mise à jour réussie\n        this.router.navigate(['/students']);\n      });\n    }\n  }\n};\nUpdateStudentComponent = __decorate([Component({\n  selector: 'app-update-student',\n  templateUrl: './update-student.component.html',\n  styleUrls: ['./update-student.component.css']\n})], UpdateStudentComponent);","map":{"version":3,"names":["Component","Validators","UpdateStudentComponent","constructor","fb","studentService","route","router","updateStudentForm","group","username","required","password","role","overlappingGroups","ngOnInit","studentId","snapshot","params","getStudentById","subscribe","data","patchValue","onSubmit","valid","updateStudent","value","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\DELL\\Desktop\\TimeMaster\\web\\time-master-frontend\\src\\app\\admin\\update-student\\update-student.component.ts"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-update-student',\n  templateUrl: './update-student.component.html',\n  styleUrls: ['./update-student.component.css']\n})\nexport class UpdateStudentComponent implements OnInit {\n  updateStudentForm: FormGroup;\n  studentId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private studentService: StudentService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    // Initialisation du formulaire réactif avec tous les champs\n    this.updateStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required],  // Ajout de ce champ\n    });\n  }\n\n  ngOnInit(): void {\n    // Récupérer l'ID de l'étudiant à partir de l'URL\n    this.studentId = this.route.snapshot.params['id'];\n\n    // Charger les données de l'étudiant à mettre à jour\n    this.studentService.getStudentById(this.studentId).subscribe(data => {\n      // Patch des valeurs de l'étudiant récupéré dans le formulaire\n      this.updateStudentForm.patchValue({\n        username: data.username,\n        password: data.password,\n        role: data.role,\n        overlappingGroups: data.overlappingGroups  // Inclure overlappingGroups\n      });\n    });\n  }\n\n  onSubmit(): void {\n    if (this.updateStudentForm.valid) {\n      // Appel du service pour mettre à jour l'étudiant\n      this.studentService.updateStudent(this.studentId, this.updateStudentForm.value).subscribe(() => {\n        // Redirection après mise à jour réussie\n        this.router.navigate(['/students']);\n      });\n    }\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAIjCC,YACUC,EAAe,EACfC,cAA8B,EAC9BC,KAAqB,EACrBC,MAAc;IAHd,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IAEd;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACnCE,IAAI,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MAC/BG,iBAAiB,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ,CAAC,CAAG;KAChD,CAAC;EACJ;;EAEAI,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAEjD;IACA,IAAI,CAACb,cAAc,CAACc,cAAc,CAAC,IAAI,CAACH,SAAS,CAAC,CAACI,SAAS,CAACC,IAAI,IAAG;MAClE;MACA,IAAI,CAACb,iBAAiB,CAACc,UAAU,CAAC;QAChCZ,QAAQ,EAAEW,IAAI,CAACX,QAAQ;QACvBE,QAAQ,EAAES,IAAI,CAACT,QAAQ;QACvBC,IAAI,EAAEQ,IAAI,CAACR,IAAI;QACfC,iBAAiB,EAAEO,IAAI,CAACP,iBAAiB,CAAE;OAC5C,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEAS,QAAQA,CAAA;IACN,IAAI,IAAI,CAACf,iBAAiB,CAACgB,KAAK,EAAE;MAChC;MACA,IAAI,CAACnB,cAAc,CAACoB,aAAa,CAAC,IAAI,CAACT,SAAS,EAAE,IAAI,CAACR,iBAAiB,CAACkB,KAAK,CAAC,CAACN,SAAS,CAAC,MAAK;QAC7F;QACA,IAAI,CAACb,MAAM,CAACoB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,CAAC;;EAEN;CACD;AA5CYzB,sBAAsB,GAAA0B,UAAA,EALlC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACW7B,sBAAsB,CA4ClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}