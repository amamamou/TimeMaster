{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/students.service\";\nimport * as i3 from \"@angular/router\";\nexport class UpdateStudentComponent {\n  constructor(fb, studentService, route, router) {\n    this.fb = fb;\n    this.studentService = studentService;\n    this.route = route;\n    this.router = router;\n    // Initialisation du formulaire réactif avec tous les champs\n    this.updateStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required] // Ajout de ce champ\n    });\n  }\n\n  ngOnInit() {\n    // Récupérer l'ID de l'étudiant à partir de l'URL\n    this.studentId = this.route.snapshot.params['id'];\n    // Charger les données de l'étudiant à mettre à jour\n    this.studentService.getStudentById(this.studentId).subscribe(data => {\n      // Patch des valeurs de l'étudiant récupéré dans le formulaire\n      this.updateStudentForm.patchValue({\n        username: data.username,\n        password: data.password,\n        role: data.role,\n        overlappingGroups: data.overlappingGroups // Inclure overlappingGroups\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.updateStudentForm.valid) {\n      // Appel du service pour mettre à jour l'étudiant\n      this.studentService.updateStudent(this.studentId, this.updateStudentForm.value).subscribe(() => {\n        // Redirection après mise à jour réussie\n        this.router.navigate(['/students']);\n      });\n    }\n  }\n  static {\n    this.ɵfac = function UpdateStudentComponent_Factory(t) {\n      return new (t || UpdateStudentComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.StudentsService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateStudentComponent,\n      selectors: [[\"app-update-student\"]],\n      decls: 2,\n      vars: 0,\n      template: function UpdateStudentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"update-student works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","UpdateStudentComponent","constructor","fb","studentService","route","router","updateStudentForm","group","username","required","password","role","overlappingGroups","ngOnInit","studentId","snapshot","params","getStudentById","subscribe","data","patchValue","onSubmit","valid","updateStudent","value","navigate","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","StudentsService","i3","ActivatedRoute","Router","selectors","decls","vars","template","UpdateStudentComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\DELL\\Desktop\\TimeMaster\\web\\time-master-frontend\\src\\app\\admin\\update-student\\update-student.component.ts","C:\\Users\\DELL\\Desktop\\TimeMaster\\web\\time-master-frontend\\src\\app\\admin\\update-student\\update-student.component.html"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { StudentsService } from 'src/app/services/students.service';\n\n\n@Component({\n  selector: 'app-update-student',\n  templateUrl: './update-student.component.html',\n  styleUrls: ['./update-student.component.css']\n})\nexport class UpdateStudentComponent implements OnInit {\n  updateStudentForm: FormGroup;\n  studentId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private studentService: StudentsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    // Initialisation du formulaire réactif avec tous les champs\n    this.updateStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required],  // Ajout de ce champ\n    });\n  }\n\n  ngOnInit(): void {\n    // Récupérer l'ID de l'étudiant à partir de l'URL\n    this.studentId = this.route.snapshot.params['id'];\n\n    // Charger les données de l'étudiant à mettre à jour\n    this.studentService.getStudentById(this.studentId).subscribe(data => {\n      // Patch des valeurs de l'étudiant récupéré dans le formulaire\n      this.updateStudentForm.patchValue({\n        username: data.username,\n        password: data.password,\n        role: data.role,\n        overlappingGroups: data.overlappingGroups  // Inclure overlappingGroups\n      });\n    });\n  }\n\n  onSubmit(): void {\n    if (this.updateStudentForm.valid) {\n      // Appel du service pour mettre à jour l'étudiant\n      this.studentService.updateStudent(this.studentId, this.updateStudentForm.value).subscribe(() => {\n        // Redirection après mise à jour réussie\n        this.router.navigate(['/students']);\n      });\n    }\n  }\n}\n","<p>update-student works!</p>\n"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAUnE,OAAM,MAAOC,sBAAsB;EAIjCC,YACUC,EAAe,EACfC,cAA+B,EAC/BC,KAAqB,EACrBC,MAAc;IAHd,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IAEd;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACnCE,IAAI,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MAC/BG,iBAAiB,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ,CAAC,CAAG;KAChD,CAAC;EACJ;;EAEAI,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAEjD;IACA,IAAI,CAACb,cAAc,CAACc,cAAc,CAAC,IAAI,CAACH,SAAS,CAAC,CAACI,SAAS,CAACC,IAAI,IAAG;MAClE;MACA,IAAI,CAACb,iBAAiB,CAACc,UAAU,CAAC;QAChCZ,QAAQ,EAAEW,IAAI,CAACX,QAAQ;QACvBE,QAAQ,EAAES,IAAI,CAACT,QAAQ;QACvBC,IAAI,EAAEQ,IAAI,CAACR,IAAI;QACfC,iBAAiB,EAAEO,IAAI,CAACP,iBAAiB,CAAE;OAC5C,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEAS,QAAQA,CAAA;IACN,IAAI,IAAI,CAACf,iBAAiB,CAACgB,KAAK,EAAE;MAChC;MACA,IAAI,CAACnB,cAAc,CAACoB,aAAa,CAAC,IAAI,CAACT,SAAS,EAAE,IAAI,CAACR,iBAAiB,CAACkB,KAAK,CAAC,CAACN,SAAS,CAAC,MAAK;QAC7F;QACA,IAAI,CAACb,MAAM,CAACoB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;MACrC,CAAC,CAAC;;EAEN;;;uBA3CWzB,sBAAsB,EAAA0B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,eAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,cAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAE,MAAA;IAAA;EAAA;;;YAAtBlC,sBAAsB;MAAAmC,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCZnCd,EAAA,CAAAgB,cAAA,QAAG;UAAAhB,EAAA,CAAAiB,MAAA,4BAAqB;UAAAjB,EAAA,CAAAkB,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}