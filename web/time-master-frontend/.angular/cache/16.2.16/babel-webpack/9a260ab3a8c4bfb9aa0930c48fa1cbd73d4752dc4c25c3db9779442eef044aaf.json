{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms'; // Importations pour le formulaire\nexport let StudentsComponent = class StudentsComponent {\n  constructor(studentsService, fb // Utilisation de FormBuilder pour créer des formulaires réactifs\n  ) {\n    this.studentsService = studentsService;\n    this.fb = fb;\n    this.students = [];\n    this.isEditing = false; // Pour activer le mode édition\n    this.currentStudentId = null; // Pour garder l'étudiant en cours d'édition\n    this.selectedStudent = null;\n    // Initialisation du formulaire\n    this.editStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.getStudents();\n  }\n  getStudents() {\n    this.studentsService.getAllStudents().subscribe(data => {\n      this.students = data;\n    });\n  }\n  deleteStudent(id) {\n    this.studentsService.deleteStudent(id).subscribe(() => {\n      console.log('Student deleted successfully');\n      this.students = this.students.filter(student => student.id !== id);\n    }, error => {\n      console.log('Error deleting student', error);\n    });\n  }\n  // Démarrer l'édition d'un étudiant\n  startEditing(student) {\n    this.isEditing = true; // Active le mode édition\n    this.currentStudentId = student.id; // Stocke l'ID de l'étudiant à éditer\n    // Remplir le formulaire avec les informations de l'étudiant\n    this.editStudentForm.patchValue({\n      username: student.username,\n      password: student.password,\n      role: student.role,\n      overlappingGroups: student.overlappingGroups\n    });\n  }\n  // Annuler l'édition\n  cancelEditing() {\n    this.isEditing = false; // Désactive le mode édition\n    this.currentStudentId = null;\n  }\n  // Enregistrer les modifications\n  updateStudent() {\n    if (this.editStudentForm.valid && this.currentStudentId !== null) {\n      this.studentsService.updateStudent(this.currentStudentId, this.editStudentForm.value).subscribe(() => {\n        console.log('Student updated successfully');\n        this.getStudents(); // Recharge la liste des étudiants après la mise à jour\n        this.isEditing = false;\n        this.currentStudentId = null;\n      }, error => {\n        console.log('Error updating student', error);\n      });\n    }\n  }\n  getStudentDetails(id) {\n    this.studentsService.getStudentById(id).subscribe(student => {\n      this.selectedStudent = student; // Stocker les détails de l'étudiant sélectionné\n    }, error => {\n      console.log('Error fetching student details', error);\n    });\n  }\n  // Pour masquer les détails\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n};\nStudentsComponent = __decorate([Component({\n  selector: 'app-students',\n  templateUrl: './students.component.html',\n  styleUrls: ['./students.component.css']\n})], StudentsComponent);","map":{"version":3,"names":["Component","Validators","StudentsComponent","constructor","studentsService","fb","students","isEditing","currentStudentId","selectedStudent","editStudentForm","group","username","required","password","role","overlappingGroups","ngOnInit","getStudents","getAllStudents","subscribe","data","deleteStudent","id","console","log","filter","student","error","startEditing","patchValue","cancelEditing","updateStudent","valid","value","getStudentDetails","getStudentById","clearSelectedStudent","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\DELL\\Desktop\\TimeMaster\\web\\time-master-frontend\\src\\app\\admin\\students\\students.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; // Importations pour le formulaire\nimport { Student } from 'src/app/models/student.model';\nimport { StudentsService } from 'src/app/services/students.service';\n\n@Component({\n  selector: 'app-students',\n  templateUrl: './students.component.html',\n  styleUrls: ['./students.component.css']\n})\nexport class StudentsComponent implements OnInit {\n  students: Student[] = [];\n  isEditing: boolean = false;  // Pour activer le mode édition\n  currentStudentId: number | null = null;  // Pour garder l'étudiant en cours d'édition\n  editStudentForm: FormGroup;  // Formulaire d'édition\n  selectedStudent: Student | null = null;\n  \n  constructor(\n    private studentsService: StudentsService,\n    private fb: FormBuilder // Utilisation de FormBuilder pour créer des formulaires réactifs\n  ) {\n    // Initialisation du formulaire\n    this.editStudentForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required],\n      overlappingGroups: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.getStudents();\n  }\n\n  getStudents(): void {\n    this.studentsService.getAllStudents().subscribe((data: Student[]) => {\n      this.students = data;\n    });\n  }\n\n  deleteStudent(id: number): void {\n    this.studentsService.deleteStudent(id).subscribe(\n      () => {\n        console.log('Student deleted successfully');\n        this.students = this.students.filter(student => student.id !== id);\n      },\n      error => {\n        console.log('Error deleting student', error);\n      }\n    );\n  }\n\n  // Démarrer l'édition d'un étudiant\n  startEditing(student: Student): void {\n    this.isEditing = true;  // Active le mode édition\n    this.currentStudentId = student.id;  // Stocke l'ID de l'étudiant à éditer\n\n    // Remplir le formulaire avec les informations de l'étudiant\n    this.editStudentForm.patchValue({\n      username: student.username,\n      password: student.password,\n      role: student.role,\n      overlappingGroups: student.overlappingGroups\n    });\n  }\n\n  // Annuler l'édition\n  cancelEditing(): void {\n    this.isEditing = false;  // Désactive le mode édition\n    this.currentStudentId = null;\n  }\n\n  // Enregistrer les modifications\n  updateStudent(): void {\n    if (this.editStudentForm.valid && this.currentStudentId !== null) {\n      this.studentsService.updateStudent(this.currentStudentId, this.editStudentForm.value).subscribe(\n        () => {\n          console.log('Student updated successfully');\n          this.getStudents();  // Recharge la liste des étudiants après la mise à jour\n          this.isEditing = false;\n          this.currentStudentId = null;\n        },\n        error => {\n          console.log('Error updating student', error);\n        }\n      );\n    }\n  }\n\n\n  getStudentDetails(id: number): void {\n    this.studentsService.getStudentById(id).subscribe(\n      (student: Student) => {\n        this.selectedStudent = student; // Stocker les détails de l'étudiant sélectionné\n      },\n      (error) => {\n        console.log('Error fetching student details', error);\n      }\n    );\n  }\n\n  // Pour masquer les détails\n  clearSelectedStudent(): void {\n    this.selectedStudent = null;\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}