{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms'; // Importations pour le formulaire\nexport let TeachersComponent = class TeachersComponent {\n  constructor(teachersService, fb // Utilisation de FormBuilder pour créer des formulaires réactifs\n  ) {\n    this.teachersService = teachersService;\n    this.fb = fb;\n    this.teachers = [];\n    this.isEditing = false; // Pour activer le mode édition\n    this.currentTeacherId = null; // Pour garder le professeur en cours d'édition\n    this.selectedTeacher = null;\n    // Initialisation du formulaire\n    this.editTeacherForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.getTeachers();\n  }\n  getTeachers() {\n    this.teachersService.getAllTeachers().subscribe(data => {\n      this.teachers = data;\n    });\n  }\n  deleteTeacher(id) {\n    this.teachersService.deleteTeacher(id).subscribe(() => {\n      console.log('Teacher deleted successfully');\n      this.teachers = this.teachers.filter(teacher => teacher.id !== id);\n    }, error => {\n      console.log('Error deleting teacher', error);\n    });\n  }\n  // Démarrer l'édition d'un professeur\n  startEditing(teacher) {\n    this.isEditing = true; // Active le mode édition\n    this.currentTeacherId = teacher.id; // Stocke l'ID du professeur à éditer\n    // Remplir le formulaire avec les informations du professeur\n    this.editTeacherForm.patchValue({\n      username: teacher.username,\n      password: teacher.password,\n      role: teacher.role\n    });\n  }\n  // Annuler l'édition\n  cancelEditing() {\n    this.isEditing = false; // Désactive le mode édition\n    this.currentTeacherId = null;\n  }\n  // Enregistrer les modifications\n  updateTeacher() {\n    if (this.editTeacherForm.valid && this.currentTeacherId !== null) {\n      this.teachersService.updateTeacher(this.currentTeacherId, this.editTeacherForm.value).subscribe(() => {\n        console.log('Teacher updated successfully');\n        this.getTeachers(); // Recharge la liste des professeurs après la mise à jour\n        this.isEditing = false;\n        this.currentTeacherId = null;\n      }, error => {\n        console.log('Error updating teacher', error);\n      });\n    }\n  }\n  getTeacherDetails(id) {\n    this.teachersService.getTeacherById(id).subscribe(teacher => {\n      this.selectedTeacher = teacher; // Stocker les détails du professeur sélectionné\n    }, error => {\n      console.log('Error fetching teacher details', error);\n    });\n  }\n  // Pour masquer les détails\n  clearSelectedTeacher() {\n    this.selectedTeacher = null;\n  }\n};\nTeachersComponent = __decorate([Component({\n  selector: 'app-teachers',\n  templateUrl: './teachers.component.html',\n  styleUrls: ['./teachers.component.css']\n})], TeachersComponent);","map":{"version":3,"names":["Component","Validators","TeachersComponent","constructor","teachersService","fb","teachers","isEditing","currentTeacherId","selectedTeacher","editTeacherForm","group","username","required","password","role","ngOnInit","getTeachers","getAllTeachers","subscribe","data","deleteTeacher","id","console","log","filter","teacher","error","startEditing","patchValue","cancelEditing","updateTeacher","valid","value","getTeacherDetails","getTeacherById","clearSelectedTeacher","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\DELL\\Desktop\\TimeMaster\\web\\time-master-frontend\\src\\app\\admin\\teachers\\teachers.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; // Importations pour le formulaire\nimport { Teacher } from 'src/app/models/teacher.model';\nimport { TeachersService } from 'src/app/services/teachers.service';\n\n@Component({\n  selector: 'app-teachers',\n  templateUrl: './teachers.component.html',\n  styleUrls: ['./teachers.component.css']\n})\nexport class TeachersComponent implements OnInit {\n  teachers: Teacher[] = [];\n  isEditing: boolean = false;  // Pour activer le mode édition\n  currentTeacherId: number | null = null;  // Pour garder le professeur en cours d'édition\n  editTeacherForm: FormGroup;  // Formulaire d'édition\n  selectedTeacher: Teacher | null = null;\n  \n  constructor(\n    private teachersService: TeachersService,\n    private fb: FormBuilder // Utilisation de FormBuilder pour créer des formulaires réactifs\n  ) {\n    // Initialisation du formulaire\n    this.editTeacherForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      role: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.getTeachers();\n  }\n\n  getTeachers(): void {\n    this.teachersService.getAllTeachers().subscribe((data: Teacher[]) => {\n      this.teachers = data;\n    });\n  }\n\n  deleteTeacher(id: number): void {\n    this.teachersService.deleteTeacher(id).subscribe(\n      () => {\n        console.log('Teacher deleted successfully');\n        this.teachers = this.teachers.filter(teacher => teacher.id !== id);\n      },\n      error => {\n        console.log('Error deleting teacher', error);\n      }\n    );\n  }\n\n  // Démarrer l'édition d'un professeur\n  startEditing(teacher: Teacher): void {\n    this.isEditing = true;  // Active le mode édition\n    this.currentTeacherId = teacher.id;  // Stocke l'ID du professeur à éditer\n\n    // Remplir le formulaire avec les informations du professeur\n    this.editTeacherForm.patchValue({\n      username: teacher.username,\n      password: teacher.password,\n      role: teacher.role\n    });\n  }\n\n  // Annuler l'édition\n  cancelEditing(): void {\n    this.isEditing = false;  // Désactive le mode édition\n    this.currentTeacherId = null;\n  }\n\n  // Enregistrer les modifications\n  updateTeacher(): void {\n    if (this.editTeacherForm.valid && this.currentTeacherId !== null) {\n      this.teachersService.updateTeacher(this.currentTeacherId, this.editTeacherForm.value).subscribe(\n        () => {\n          console.log('Teacher updated successfully');\n          this.getTeachers();  // Recharge la liste des professeurs après la mise à jour\n          this.isEditing = false;\n          this.currentTeacherId = null;\n        },\n        error => {\n          console.log('Error updating teacher', error);\n        }\n      );\n    }\n  }\n\n  getTeacherDetails(id: number): void {\n    this.teachersService.getTeacherById(id).subscribe(\n      (teacher: Teacher) => {\n        this.selectedTeacher = teacher; // Stocker les détails du professeur sélectionné\n      },\n      (error) => {\n        console.log('Error fetching teacher details', error);\n      }\n    );\n  }\n\n  // Pour masquer les détails\n  clearSelectedTeacher(): void {\n    this.selectedTeacher = null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}